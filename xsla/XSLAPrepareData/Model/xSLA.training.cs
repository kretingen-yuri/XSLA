// This file was auto-generated by ML.NET Model Builder.

using Microsoft.ML;
using Microsoft.ML.Trainers.FastTree;

namespace XSLAPrepareData.Model
{
    public partial class MLModel1
    {
        public const string RetrainFilePath =  @"C:\Users\haimy\Downloads\Modifided 1.csv";
        public const char RetrainSeparatorChar = ',';
        public const bool RetrainHasHeader =  true;

         /// <summary>
        /// Train a new model with the provided dataset.
        /// </summary>
        /// <param name="outputModelPath">File path for saving the model. Should be similar to "C:\YourPath\ModelName.mlnet"</param>
        /// <param name="inputDataFilePath">Path to the data file for training.</param>
        /// <param name="separatorChar">Separator character for delimited training file.</param>
        /// <param name="hasHeader">Boolean if training file has a header.</param>
        public static void Train(string outputModelPath, string inputDataFilePath = RetrainFilePath, char separatorChar = RetrainSeparatorChar, bool hasHeader = RetrainHasHeader)
        {
            var mlContext = new MLContext();

            var data = LoadIDataViewFromFile(mlContext, inputDataFilePath, separatorChar, hasHeader);
            var model = RetrainModel(mlContext, data);
            SaveModel(mlContext, model, data, outputModelPath);
        }

        /// <summary>
        /// Load an IDataView from a file path.
        /// </summary>
        /// <param name="mlContext">The common context for all ML.NET operations.</param>
        /// <param name="inputDataFilePath">Path to the data file for training.</param>
        /// <param name="separatorChar">Separator character for delimited training file.</param>
        /// <param name="hasHeader">Boolean if training file has a header.</param>
        /// <returns>IDataView with loaded training data.</returns>
        public static IDataView LoadIDataViewFromFile(MLContext mlContext, string inputDataFilePath, char separatorChar, bool hasHeader)
        {
            return mlContext.Data.LoadFromTextFile<ModelInput>(inputDataFilePath, separatorChar, hasHeader);
        }



        /// <summary>
        /// Save a model at the specified path.
        /// </summary>
        /// <param name="mlContext">The common context for all ML.NET operations.</param>
        /// <param name="model">Model to save.</param>
        /// <param name="data">IDataView used to train the model.</param>
        /// <param name="modelSavePath">File path for saving the model. Should be similar to "C:\YourPath\ModelName.mlnet.</param>
        public static void SaveModel(MLContext mlContext, ITransformer model, IDataView data, string modelSavePath)
        {
            // Pull the data schema from the IDataView used for training the model
            DataViewSchema dataViewSchema = data.Schema;

            using (var fs = File.Create(modelSavePath))
            {
                mlContext.Model.Save(model, dataViewSchema, fs);
            }
        }


        /// <summary>
        /// Retrains model using the pipeline generated as part of the training process.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <param name="trainData"></param>
        /// <returns></returns>
        public static ITransformer RetrainModel(MLContext mlContext, IDataView trainData)
        {
            var pipeline = BuildPipeline(mlContext);
            var model = pipeline.Fit(trainData);

            return model;
        }


        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.ReplaceMissingValues(new []{new InputOutputColumnPair(@"CreatedMonth", @"CreatedMonth"),new InputOutputColumnPair(@"DaysSinceRelease", @"DaysSinceRelease"),new InputOutputColumnPair(@"Priority", @"Priority"),new InputOutputColumnPair(@"Sentimental", @"Sentimental"),new InputOutputColumnPair(@"ghost_vra", @"ghost_vra"),new InputOutputColumnPair(@"vpg", @"vpg"),new InputOutputColumnPair(@"fol", @"fol"),new InputOutputColumnPair(@"move", @"move"),new InputOutputColumnPair(@"ssh", @"ssh"),new InputOutputColumnPair(@"install", @"install"),new InputOutputColumnPair(@"host_logs", @"host_logs"),new InputOutputColumnPair(@"upgrade", @"upgrade"),new InputOutputColumnPair(@"crash", @"crash"),new InputOutputColumnPair(@"wa", @"wa"),new InputOutputColumnPair(@"fixed", @"fixed"),new InputOutputColumnPair(@"fully", @"fully"),new InputOutputColumnPair(@"env_is_ok", @"env_is_ok"),new InputOutputColumnPair(@"msp", @"msp"),new InputOutputColumnPair(@"vcd", @"vcd"),new InputOutputColumnPair(@"kicklock", @"kicklock"),new InputOutputColumnPair(@"ltr", @"ltr"),new InputOutputColumnPair(@"network", @"network"),new InputOutputColumnPair(@"Firewall", @"Firewall"),new InputOutputColumnPair(@"proxy", @"proxy"),new InputOutputColumnPair(@"ProblematicPlatform", @"ProblematicPlatform"),new InputOutputColumnPair(@"CustomerName_int", @"CustomerName_int"),new InputOutputColumnPair(@"AffectedVersion_int", @"AffectedVersion_int"),new InputOutputColumnPair(@"Initiative_int", @"Initiative_int"),new InputOutputColumnPair(@"ZVMZCAOsType_int", @"ZVMZCAOsType_int"),new InputOutputColumnPair(@"Component_int", @"Component_int")})      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"ToPlatform",outputColumnName:@"ToPlatform"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"FromPlatform",outputColumnName:@"FromPlatform"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"CustomerName",outputColumnName:@"CustomerName"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"AffectedVersion",outputColumnName:@"AffectedVersion"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"IsEscalationTeam",outputColumnName:@"IsEscalationTeam"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Severity",outputColumnName:@"Severity"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Initiative",outputColumnName:@"Initiative"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"ZVMZCAOsType",outputColumnName:@"ZVMZCAOsType"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Component",outputColumnName:@"Component"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"UserImpact",outputColumnName:@"UserImpact"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"WhatIsNeeded",outputColumnName:@"WhatIsNeeded"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Summary",outputColumnName:@"Summary"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"driver",outputColumnName:@"driver"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"vra",outputColumnName:@"vra"))      
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new []{@"CreatedMonth",@"DaysSinceRelease",@"Priority",@"Sentimental",@"ghost_vra",@"vpg",@"fol",@"move",@"ssh",@"install",@"host_logs",@"upgrade",@"crash",@"wa",@"fixed",@"fully",@"env_is_ok",@"msp",@"vcd",@"kicklock",@"ltr",@"network",@"Firewall",@"proxy",@"ProblematicPlatform",@"CustomerName_int",@"AffectedVersion_int",@"Initiative_int",@"ZVMZCAOsType_int",@"Component_int",@"ToPlatform",@"FromPlatform",@"CustomerName",@"AffectedVersion",@"IsEscalationTeam",@"Severity",@"Initiative",@"ZVMZCAOsType",@"Component",@"UserImpact",@"WhatIsNeeded",@"Summary",@"driver",@"vra"}))      
                                    .Append(mlContext.Regression.Trainers.FastForest(new FastForestRegressionTrainer.Options(){NumberOfTrees=4,NumberOfLeaves=4,FeatureFraction=1F,LabelColumnName=@"NumberOfWorkingDays",FeatureColumnName=@"Features"}));

            return pipeline;
        }
    }
 }
